{"version":3,"sources":["../../js/MyFileReader.js"],"names":["MyFileReader","prototype","constructor","readTextFile","file","intoLines","intoWords","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","allText","responseText","console","log","lineArr","firstLineWords","secondLineWords","atlas","i","length","atlasJson","JSON","stringify","download","send","text","name","type","a","document","getElementById","Blob","href","URL","createObjectURL","split","lines","wordsArr"],"mappings":";;AAAAA,eAAe,wBAAY,CAI1B,CAJD;;AAMAA,aAAaC,SAAb,GAAyB;;AAErBC,iBAAaF,YAFQ;;AAIrBG,kBAAc,sBAAUC,IAAV,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsC;;AAEhD,YAAIC,UAAU,IAAIC,cAAJ,EAAd;AACAD,gBAAQE,IAAR,CAAa,KAAb,EAAoBL,IAApB,EAA0B,KAA1B;AACAG,gBAAQG,kBAAR,GAA6B,YAAY;AACrC,gBAAIH,QAAQI,UAAR,KAAuB,CAA3B,EAA8B;AAC1B,oBAAIJ,QAAQK,MAAR,KAAmB,GAAnB,IAA0BL,QAAQK,MAAR,IAAkB,CAAhD,EAAmD;AAC/CC,8BAAUN,QAAQO,YAAlB;AACAC,4BAAQC,GAAR,CAAY,sBAAZ,EAAoCH,OAApC;AACA,wBAAII,UAAU,KAAKZ,SAAL,CAAeQ,OAAf,CAAd;AACA,wBAAIK,iBAAiB,KAAKZ,SAAL,CAAeW,QAAQ,CAAR,CAAf,CAArB;AACA,wBAAIE,kBAAkB,KAAKb,SAAL,CAAeW,QAAQ,CAAR,CAAf,CAAtB;;AAEAF,4BAAQC,GAAR,CAAY,sBAAZ,EAAoCC,QAAQ,CAAR,CAApC;;AAEA,wBAAIG,QAAQ,EAAZ;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,eAAeI,MAAnC,EAA2CD,GAA3C,EAAgD;AAC5CN,gCAAQC,GAAR,UAAmBK,CAAnB,qCAAoDH,eAAeG,CAAf,CAApD;AACAN,gCAAQC,GAAR,UAAmBK,CAAnB,sCAAqDF,gBAAgBE,CAAhB,CAArD;AACAD,8BAAMF,eAAeG,CAAf,CAAN,IAA2BF,gBAAgBE,CAAhB,CAA3B;AACH;AACDN,4BAAQC,GAAR,CAAY,gBAAZ,EAA8BI,KAA9B;AACA,wBAAIG,YAAYC,KAAKC,SAAL,CAAeL,KAAf,CAAhB;AACAL,4BAAQC,GAAR,CAAY,oBAAZ,EAAkCO,SAAlC;;AAEA,yBAAKG,QAAL,CAAcH,SAAd,EAAyB,eAAzB,EAA0C,YAA1C;AACH;AACJ;AACJ,SAxBD;AAyBAhB,gBAAQoB,IAAR,CAAa,IAAb;AACH,KAlCoB;;AAoCrBD,cAAU,kBAAUE,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;;AAElC,YAAIC,IAAIC,SAASC,cAAT,CAAwB,GAAxB,CAAR;AACA,YAAI7B,OAAO,IAAI8B,IAAJ,CAAS,CAACN,IAAD,CAAT,EAAiB,EAACE,MAAMA,IAAP,EAAjB,CAAX;AACAC,UAAEI,IAAF,GAASC,IAAIC,eAAJ,CAAoBjC,IAApB,CAAT;AACA2B,UAAEL,QAAF,GAAaG,IAAb;AACH,KA1CoB;AA2CrBxB,eAAW,mBAAUuB,IAAV,EAAgB;AACvB;AACA;;AAEA,YAAIX,UAAUW,KAAKU,KAAL,CAAW,IAAX,CAAd;;AAEA;;;AAGA,eAAOrB,OAAP;AAGH,KAvDoB;AAwDrBX,eAAW,mBAAUiC,KAAV,EAAiB;;AAGxB,YAAIC,WAAWD,MAAMD,KAAN,CAAY,KAAZ,CAAf;;AAGA,eAAOE,QAAP;AAEH;;AAhEoB,CAAzB","file":"MyFileReader.js","sourcesContent":["MyFileReader = function () {\r\n\r\n\r\n\r\n}\r\n\r\nMyFileReader.prototype = {\r\n\r\n    constructor: MyFileReader,\r\n\r\n    readTextFile: function (file, intoLines, intoWords) {\r\n\r\n        var rawFile = new XMLHttpRequest();\r\n        rawFile.open(\"GET\", file, false);\r\n        rawFile.onreadystatechange = function () {\r\n            if (rawFile.readyState === 4) {\r\n                if (rawFile.status === 200 || rawFile.status == 0) {\r\n                    allText = rawFile.responseText;\r\n                    console.log('The complete text is', allText);\r\n                    let lineArr = this.intoLines(allText);\r\n                    let firstLineWords = this.intoWords(lineArr[0]);\r\n                    let secondLineWords = this.intoWords(lineArr[1]);\r\n\r\n                    console.log('Our  first line is: ', lineArr[0]);\r\n\r\n                    let atlas = {};\r\n                    for (let i = 0; i < firstLineWords.length; i++) {\r\n                        console.log(`Our ${i} word in the first line is : ${firstLineWords[i]}`);\r\n                        console.log(`Our ${i} word in the SECOND line is : ${secondLineWords[i]}`);\r\n                        atlas[firstLineWords[i]] = secondLineWords[i];\r\n                    }\r\n                    console.log('The atlas is: ', atlas);\r\n                    let atlasJson = JSON.stringify(atlas);\r\n                    console.log('Atlas as json is: ', atlasJson);\r\n\r\n                    this.download(atlasJson, 'atlasJson.txt', 'text/plain');\r\n                }\r\n            }\r\n        };\r\n        rawFile.send(null);\r\n    },\r\n\r\n    download: function (text, name, type) {\r\n\r\n        var a = document.getElementById(\"a\");\r\n        var file = new Blob([text], {type: type});\r\n        a.href = URL.createObjectURL(file);\r\n        a.download = name;\r\n    },\r\n    intoLines: function (text) {\r\n        // splitting all text data into array \"\\n\" is splitting data from each new line\r\n        //and saving each new line as each element*\r\n\r\n        var lineArr = text.split('\\n');\r\n\r\n        //just to check if it works output lineArr[index] as below\r\n\r\n\r\n        return lineArr;\r\n\r\n\r\n    },\r\n    intoWords: function (lines) {\r\n\r\n\r\n        var wordsArr = lines.split('\" \"');\r\n\r\n\r\n        return wordsArr;\r\n\r\n    },\r\n\r\n};\r\n\r\n\r\n\r\n"]}